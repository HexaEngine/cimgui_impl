name: Build cimgui Libraries

on: [workflow_dispatch]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
#          - os: ubuntu-latest # Works (disabled for testing)
#            arch: x86_64
#            cmake-arch: x64
#          - os: ubuntu-latest # Nope (disabled for testing)
#            arch: arm64
#            cmake-arch: aarch64
#          - os: windows-latest # Nope (disabled for testing)
#            arch: x86_64 
#            cmake-arch: x64
#          - os: windows-latest # Nope (disabled for testing)
#            arch: x86
#            cmake-arch: win32 
#          - os: windows-latest # Nope (disabled for testing)
#            arch: arm64
#            cmake-arch: arm64
          - os: macos-latest-large
            arch: x86_64
            cmake-arch: x86_64
          - os: macos-latest
            arch: arm64
            cmake-arch: arm64
    steps:
    - uses: actions/checkout@v4.1.7
      with:
        repository: 'JunaMeinhold/cimgui_impl'
        path: 'cimgui'
        submodules: true

    - name: Install dependencies on Ubuntu
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake libsdl2-dev libglfw3-dev libglu1-mesa-dev libvulkan-dev

    - name: Install dependencies on MacOS
      if: matrix.os == 'macos-latest' && matrix.arch != 'x86_64'
      run: |
        brew install cmake sdl2 glfw glew glm
        
    - name: Install dependencies on MacOS
      if: matrix.os == 'macos-latest' && matrix.arch == 'x86_64'
      run: |
        arch -x86_64 brew install cmake sdl2 glfw glew glm
      
    - name: Prepare Vulkan SDK
      if: matrix.os == 'macos-latest'
      uses: humbletim/setup-vulkan-sdk@v1.2.0
      with:
       vulkan-query-version: 1.3.204.0
       vulkan-components: Vulkan-Headers, Vulkan-Loader, Glslang 
       vulkan-use-cache: true

    - name: Install Cross-Compilation Tools for ARM64
      if: matrix.os == 'ubuntu-latest' && matrix.arch == 'arm64'
      run: |
        sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

    - name: Configure cimgui with CMake for ARM64 on Linux
      if: matrix.os == 'ubuntu-latest' && matrix.arch == 'arm64'
      run: cmake -S cimgui -B cimgui/build -DCMAKE_BUILD_TYPE=Release -DCMAKE_SYSTEM_PROCESSOR=aarch64 -DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc -DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++

    - name: Configure cimgui with CMake on Linux (x86_64)
      if: matrix.os == 'ubuntu-latest' && matrix.arch == 'x86_64'
      run: cmake -S cimgui -B cimgui/build
      
    - name: Configure cimgui with CMake for macOS
      if: matrix.os == 'macos-latest'
      run: |
        cmake -S cimgui -B cimgui/build -DCMAKE_OSX_ARCHITECTURES=${{ matrix.cmake-arch }} 

    - name: Configure cimgui with CMake for Windows
      if: matrix.os == 'windows-latest'
      run: cmake -S cimgui -B cimgui/build -A ${{ matrix.cmake-arch }}

    - name: Build cimgui
      run: cmake --build cimgui/build --config Release

    - name: Move Windows binaries
      if: matrix.os == 'windows-latest'
      run: |
        mv cimgui/build/Release/*.dll cimgui/build/

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4.3.4
      with:
        name: cimgui-${{ matrix.os }}-${{ matrix.arch }}-artifacts 
        path: |
          cimgui/build/*.dll
          cimgui/build/*.so
          cimgui/build/*.dylib
        if-no-files-found: ignore # 'warn' or 'ignore' or 'error'
